// Data transformation utilities
// Converts between form data and database structure

import { 
  CompleteAuctionData, 
  Sale, 
  Indicator, 
  ExchangeRate, 
  BuyerPurchase, 
  OfferingAnalysis, 
  AveragePricesClean,
  IndicatorType,
  ValueUnit,
  CertStatus,
  StyleCode
} from './models';
import type { AuctionReport } from '../types';

// Transform form data to database structure
export const transformFormToDatabase = (formData: Omit<AuctionReport, 'top_sales'>): CompleteAuctionData => {
  // Transform auction data
  const sale: Sale = {
    id: '', // Will be generated by storage
    season: formData.auction.season_label,
    catalogue_no: parseInt(formData.auction.catalogue_name.replace(/\D/g, '')) || 1,
    sale_date: formData.auction.auction_date,
    location: 'Port Elizabeth', // Default location
    total_bales_offered: formData.indicators.find(i => i.type === 'total_lots')?.value || 0,
    total_bales_sold: formData.indicators.find(i => i.type === 'total_lots')?.value || 0,
    clearance_pct: 100, // Default to 100% if not specified
    highest_price_c_per_kg_clean: Math.max(...formData.micron_prices.map(p => p.price_clean_zar_per_kg)),
    highest_price_micron: 17.0, // Default, could be calculated from micron prices
    created_at: new Date().toISOString()
  };

  // Transform indicators
  const indicators: Indicator[] = formData.indicators.map(indicator => ({
    id: '', // Will be generated by storage
    sale_id: '', // Will be set by storage
    indicator: mapIndicatorType(indicator.type),
    unit: 'sa_c_per_kg_clean' as ValueUnit,
    value_this_sale: indicator.value,
    value_prior_sale: indicator.value_ytd,
    pct_change: indicator.pct_change
  }));

  // Add yearly average prices as indicators
  if (formData.yearly_average_prices) {
    formData.yearly_average_prices.forEach(price => {
      indicators.push({
        id: '',
        sale_id: '',
        indicator: price.label.includes('Certified Wool') ? 'certified_merino' : 'all_merino',
        unit: 'sa_c_per_kg_clean' as ValueUnit,
        value_this_sale: price.value,
        value_prior_sale: undefined,
        pct_change: 0
      });
    });
  }

  // Transform exchange rates
  const exchangeRates: ExchangeRate[] = formData.currencies.map(currency => ({
    id: '', // Will be generated by storage
    sale_id: '', // Will be set by storage
    pair: `ZAR/${currency.code}`,
    value_this_sale: currency.value,
    value_prior_sale: currency.value + currency.change, // Approximate previous value
    pct_change: currency.change,
    note: 'Average rate during sale'
  }));

  // Transform buyers to buyer purchases
  const buyerPurchases: BuyerPurchase[] = formData.buyers.map(buyer => ({
    id: '', // Will be generated by storage
    sale_id: '', // Will be set by storage
    company: buyer.buyer,
    bales_this_sale: buyer.cat,
    pct_share: buyer.share_pct,
    bales_ytd: buyer.bales_ytd
  }));

  // Transform brokers to offering analysis
  const offeringAnalysis: OfferingAnalysis[] = formData.brokers.map(broker => ({
    id: '', // Will be generated by storage
    sale_id: '', // Will be set by storage
    broker: broker.name,
    catalogue_offering: broker.catalogue_offering,
    sold: broker.catalogue_offering, // Assume all offered was sold
    pct_sold: 100 // Default to 100%
  }));

  // Transform micron prices to average prices clean
  const averagePricesClean: AveragePricesClean[] = [];
  
  // Create entries for each micron price with different style codes and lengths
  formData.micron_prices.forEach(micronPrice => {
    if (micronPrice.price_clean_zar_per_kg > 0) {
      // Add entries for different style codes and lengths
      const styleCodes: StyleCode[] = ['MF4', 'MF5', 'MF6'];
      const lengths = [40, 50, 60, 70, 80];
      const certStatuses: CertStatus[] = ['certified', 'non_certified'];
      
      styleCodes.forEach(styleCode => {
        lengths.forEach(length => {
          certStatuses.forEach(cert => {
            // Adjust price based on style code and certification
            let adjustedPrice = micronPrice.price_clean_zar_per_kg;
            
            // Style code adjustments
            if (styleCode === 'MF4') adjustedPrice *= 1.1; // Premium for better style
            if (styleCode === 'MF6') adjustedPrice *= 0.9; // Discount for poorer style
            
            // Length adjustments
            if (length >= 70) adjustedPrice *= 1.05; // Premium for longer length
            if (length <= 40) adjustedPrice *= 0.95; // Discount for shorter length
            
            // Certification adjustments
            if (cert === 'non_certified') adjustedPrice *= 0.95; // Discount for non-certified
            
            averagePricesClean.push({
              id: '', // Will be generated by storage
              sale_id: '', // Will be set by storage
              micron: parseFloat(micronPrice.bucket_micron),
              style_code: styleCode,
              length_mm: length,
              cert: cert,
              avg_price_r_ckg: Math.round(adjustedPrice * 100) / 100
            });
          });
        });
      });
    }
  });

  return {
    sale,
    indicators,
    exchange_rates: exchangeRates,
    certified_vs_noncert: [],
    certified_share: [],
    sale_statistics: [],
    receivals: [],
    offering_analysis: offeringAnalysis,
    buyer_purchases: buyerPurchases,
    sale_analysis_totals: [],
    bales_sold_by_length: [],
    bales_sold_by_style: [],
    average_prices_clean: averagePricesClean,
    report_ingest_audit: []
  };
};

// Transform database structure back to form data
export const transformDatabaseToForm = (dbData: CompleteAuctionData): Omit<AuctionReport, 'top_sales'> => {
  // Transform sale back to auction
  const auction = {
    commodity: 'wool' as const,
    season_label: dbData.sale.season,
    week_id: `week_${new Date(dbData.sale.sale_date).getFullYear()}_${String(dbData.sale.catalogue_no).padStart(2, '0')}`,
    week_start: getWeekStart(dbData.sale.sale_date),
    week_end: getWeekEnd(dbData.sale.sale_date),
    auction_date: dbData.sale.sale_date,
    catalogue_name: `CAT${String(dbData.sale.catalogue_no).padStart(2, '0')}`
  };

  // Transform indicators
  const indicators = dbData.indicators.map(indicator => ({
    type: mapIndicatorTypeToForm(indicator.indicator),
    unit: mapValueUnitToForm(indicator.unit),
    value: indicator.value_this_sale || 0,
    value_ytd: indicator.value_prior_sale,
    pct_change: indicator.pct_change || 0
  }));

  // Transform benchmarks (from indicators)
  const benchmarks = dbData.indicators
    .filter(ind => ind.indicator === 'certified_merino' || ind.indicator === 'all_merino')
    .map(indicator => ({
      label: indicator.indicator === 'certified_merino' ? 'Certified' : 'All-Merino',
      price: indicator.value_this_sale || 0,
      currency: 'ZAR/kg clean',
      day_change_pct: indicator.pct_change || 0
    }));

  // Transform micron prices (from average prices clean)
  const micronPrices = dbData.average_prices_clean
    .filter(price => price.style_code === 'MF5' && price.length_mm === 60 && price.cert === 'certified')
    .map(price => ({
      bucket_micron: price.micron.toString(),
      category: getMicronCategory(price.micron),
      price_clean_zar_per_kg: price.avg_price_r_ckg || 0
    }));

  // Transform buyers
  const buyers = dbData.buyer_purchases.map(purchase => ({
    buyer: purchase.company,
    share_pct: purchase.pct_share || 0,
    cat: purchase.bales_this_sale || 0,
    bales_ytd: purchase.bales_ytd || 0
  }));

  // Transform brokers
  const brokers = dbData.offering_analysis.map(analysis => ({
    name: analysis.broker,
    catalogue_offering: analysis.catalogue_offering || 0,
    sold_ytd: analysis.sold || 0
  }));

  // Transform currencies
  const currencies = dbData.exchange_rates.map(rate => ({
    code: rate.pair.split('/')[1] as 'USD' | 'AUD' | 'EUR',
    value: rate.value_this_sale || 0,
    change: rate.pct_change || 0
  }));

  // Transform yearly average prices (from indicators)
  const yearlyAveragePrices = dbData.indicators
    .filter(ind => ind.indicator === 'certified_merino' || ind.indicator === 'all_merino')
    .map(indicator => ({
      label: indicator.indicator === 'certified_merino' ? 'Certified Wool Avg Price (YTD)' : 'All - Merino Wool Avg Price (YTD)',
      value: indicator.value_this_sale || 0,
      unit: 'ZAR/kg'
    }));

  return {
    auction,
    indicators,
    benchmarks,
    micron_prices: micronPrices,
    buyers,
    brokers,
    currencies,
    insights: '', // This would need to be stored separately
    trends: { rws: [], non_rws: [] }, // This would be calculated from historical data
    yearly_average_prices: yearlyAveragePrices,
    provincial_producers: [], // This would need to be stored separately
    province_avg_prices: [] // This would be calculated from provincial data
  };
};

// Helper functions
const mapIndicatorType = (formType: string): IndicatorType => {
  switch (formType) {
    case 'total_lots':
    case 'total_volume':
    case 'total_value':
      return 'all_merino';
    case 'avg_price':
      return 'certified_merino';
    default:
      return 'all_merino';
  }
};

const mapIndicatorTypeToForm = (dbType: IndicatorType): string => {
  switch (dbType) {
    case 'all_merino':
      return 'total_lots';
    case 'certified_merino':
      return 'avg_price';
    case 'awex_emi':
      return 'total_value';
    default:
      return 'total_lots';
  }
};

const mapValueUnitToForm = (dbUnit: ValueUnit): string => {
  switch (dbUnit) {
    case 'sa_c_per_kg_clean':
      return 'ZAR/kg';
    case 'us_c_per_kg_clean':
      return 'USD/kg';
    case 'euro_c_per_kg_clean':
      return 'EUR/kg';
    case 'ratio':
      return 'ratio';
    default:
      return 'ZAR/kg';
  }
};

const getMicronCategory = (micron: number): 'Fine' | 'Medium' | 'Strong' => {
  if (micron <= 19) return 'Fine';
  if (micron <= 21) return 'Medium';
  return 'Strong';
};

const getWeekStart = (dateString: string): string => {
  const date = new Date(dateString);
  const dayOfWeek = date.getDay();
  const weekStart = new Date(date);
  weekStart.setDate(date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));
  return weekStart.toISOString().split('T')[0];
};

const getWeekEnd = (dateString: string): string => {
  const date = new Date(dateString);
  const dayOfWeek = date.getDay();
  const weekStart = new Date(date);
  weekStart.setDate(date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));
  const weekEnd = new Date(weekStart);
  weekEnd.setDate(weekStart.getDate() + 6);
  return weekEnd.toISOString().split('T')[0];
};
